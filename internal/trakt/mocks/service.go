// Code generated by MockGen. DO NOT EDIT.
// Source: ./service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	trakt "MovieTinder/internal/trakt"
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserTokenStorage is a mock of UserTokenStorage interface
type MockUserTokenStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserTokenStorageMockRecorder
}

// MockUserTokenStorageMockRecorder is the mock recorder for MockUserTokenStorage
type MockUserTokenStorageMockRecorder struct {
	mock *MockUserTokenStorage
}

// NewMockUserTokenStorage creates a new mock instance
func NewMockUserTokenStorage(ctrl *gomock.Controller) *MockUserTokenStorage {
	mock := &MockUserTokenStorage{ctrl: ctrl}
	mock.recorder = &MockUserTokenStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserTokenStorage) EXPECT() *MockUserTokenStorageMockRecorder {
	return m.recorder
}

// StoreAccessToken mocks base method
func (m *MockUserTokenStorage) StoreAccessToken(ctx context.Context, userID, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreAccessToken", ctx, userID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreAccessToken indicates an expected call of StoreAccessToken
func (mr *MockUserTokenStorageMockRecorder) StoreAccessToken(ctx, userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreAccessToken", reflect.TypeOf((*MockUserTokenStorage)(nil).StoreAccessToken), ctx, userID, token)
}

// GetAccessToken mocks base method
func (m *MockUserTokenStorage) GetAccessToken(ctx context.Context, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessToken", ctx, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessToken indicates an expected call of GetAccessToken
func (mr *MockUserTokenStorageMockRecorder) GetAccessToken(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessToken", reflect.TypeOf((*MockUserTokenStorage)(nil).GetAccessToken), ctx, username)
}

// MockWatchlistService is a mock of WatchlistService interface
type MockWatchlistService struct {
	ctrl     *gomock.Controller
	recorder *MockWatchlistServiceMockRecorder
}

// MockWatchlistServiceMockRecorder is the mock recorder for MockWatchlistService
type MockWatchlistServiceMockRecorder struct {
	mock *MockWatchlistService
}

// NewMockWatchlistService creates a new mock instance
func NewMockWatchlistService(ctrl *gomock.Controller) *MockWatchlistService {
	mock := &MockWatchlistService{ctrl: ctrl}
	mock.recorder = &MockWatchlistServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWatchlistService) EXPECT() *MockWatchlistServiceMockRecorder {
	return m.recorder
}

// GetWatchlist mocks base method
func (m *MockWatchlistService) GetWatchlist(ctx context.Context, request *trakt.GetWatchlistRequest) (trakt.Movies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWatchlist", ctx, request)
	ret0, _ := ret[0].(trakt.Movies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWatchlist indicates an expected call of GetWatchlist
func (mr *MockWatchlistServiceMockRecorder) GetWatchlist(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWatchlist", reflect.TypeOf((*MockWatchlistService)(nil).GetWatchlist), ctx, request)
}

// MockWatchlistComparator is a mock of WatchlistComparator interface
type MockWatchlistComparator struct {
	ctrl     *gomock.Controller
	recorder *MockWatchlistComparatorMockRecorder
}

// MockWatchlistComparatorMockRecorder is the mock recorder for MockWatchlistComparator
type MockWatchlistComparatorMockRecorder struct {
	mock *MockWatchlistComparator
}

// NewMockWatchlistComparator creates a new mock instance
func NewMockWatchlistComparator(ctrl *gomock.Controller) *MockWatchlistComparator {
	mock := &MockWatchlistComparator{ctrl: ctrl}
	mock.recorder = &MockWatchlistComparatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWatchlistComparator) EXPECT() *MockWatchlistComparatorMockRecorder {
	return m.recorder
}

// CompareWatchlists mocks base method
func (m *MockWatchlistComparator) CompareWatchlists(ctx context.Context, user1, user2 trakt.Movies) (trakt.WatchlistComparison, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareWatchlists", ctx, user1, user2)
	ret0, _ := ret[0].(trakt.WatchlistComparison)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CompareWatchlists indicates an expected call of CompareWatchlists
func (mr *MockWatchlistComparatorMockRecorder) CompareWatchlists(ctx, user1, user2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareWatchlists", reflect.TypeOf((*MockWatchlistComparator)(nil).CompareWatchlists), ctx, user1, user2)
}
